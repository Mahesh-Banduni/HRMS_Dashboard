generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "windows", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId        String    @id @default(uuid())
  email     String    @unique
  password  String
  name      String?
  role      UserRole  @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  employee  Employee?
  candidate Candidate?

  webPushSubscriptions WebPushSubscription[]
}

model Employee {
  employeeId               String           @id @default(uuid())
  name             String
  dateOfJoining    DateTime
  position         PositionType
  phoneNumber      String
  department       String
  email            String           @unique
  attendanceStatus AttendanceStatus
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  userId           String?          @unique
  user             User?            @relation(fields: [userId], references: [userId])
  leaves           Leave[]
  candidateId      String?          @unique
  candidate        Candidate?       @relation(fields: [candidateId], references: [userId])
}

model Candidate {
  candidateId                String            @id @default(uuid())
  name              String
  resumefileUrl     String
  email             String            @unique
  phoneNumber       String
  position          PositionType  
  applicationStatus ApplicationStatus @default(New)
  yearsOfExperience Float
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  userId            String?           @unique
  user              User?             @relation(fields: [userId], references: [userId])
  employee           Employee?
}


model Leave {
  leaveId          String      @id @default(uuid())
  date        DateTime
  employeeId  String
  reason      String
  department  String
  documentUrl String?
  status      LeaveStatus @default(Pending)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  employee    Employee    @relation(fields: [employeeId], references: [userId])

  @@index([employeeId])
}

enum UserRole {
  ADMIN
  USER
}

enum AttendanceStatus {
  Present
  Absent
  Medical_Leave
  Work_From_Home
}

enum LeaveStatus {
  Pending
  Approved
  Rejected
}

enum ApplicationStatus {
  New
  Scheduled
  Ongoing
  Selected
  Rejected
}

enum PositionType {
  Intern
  Full_Time
  Junior
  Senior
  Team_Lead
}

model WebPushSubscription {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [userId])
  userId    String
  endpoint  String   @unique
  p256dh    String
  auth      String
  createdAt DateTime @default(now())
  @@index([userId])
}
